* NodeJS server for GraphViz
** What it does
If you run serve.js with [[http://www.nodejs.org][NodeJS]], it will create a webserver on your computer.
This webserver will listen on port 15216 until you kill the process.
You can kill it with C-c (that is, Control+C) at the command line whence you ran it.
You can visit your webserver at [[http://127.0.0.1:15216/]].
You will need [[http://www.graphviz.org][GraphViz]] for this to work.

** NodeJS
serve.js is written in [[http://docs.webplatform.org/wiki/javascript][JavaScript]].
Particularly, it is written in [[http://www.nodejs.org][Node]], a command-line [[http://code.google.com/p/v8/][V8]] with [[http://www.opengroup.org/austin/papers/posix_faq.html][POSIX]]-like libraries.
[[http://www.nodebeginner.org/][Not familiar]] with Node or even JS at all? Good! This whole thing is for teaching.
The NodeJS [[http://nodejs.org/api/][documentation]] is good if you already know JS. Let's suppose you don't.
*** CommonJS
NodeJS includes a bunch of libraries.
You can get to these libraries from within your JavaScript by using the [[http://www.commonjs.org/][CommonJS]] interface.
For now, all you need to know is that that means you use a function called "require"
 and pass a string to it and it returns an object representing the module you want to include.
*** using CommonJS to include other libraries
The syntax for function calls in JavaScript looks like that of C.
String literals look like those in C.
So that means that requiring the HTTP library (for example) involves typing something like
: require("http")
and that that expression evaluates to an object.
But what do we do with that object? Let's store it in a variable!
How do I create a variable in JavaScript?
The "var" keyword is how to create a variable in the local scope.
JavaScript has [[http://c2.com/cgi/wiki?LexicalScoping][lexical scoping]].
For now, we'll just create some variables at the file-level scope and not worry about what that means.
: var http = require("http");
Now you have a variable called http, and its value is an object.
An object in JavaScript is (basically) just a dictionary.
That is, it maps string keys to values.
Key lookup can be done with either the dot notation or the bracket notation.
For instance, the http object returned by that require statement has a property called "createServer".
You can access this property as
: http.createServer
or
: http["createServer"]
The result is the same either way.

*** creating functions
Functions in JavaScript are created with the "function" keyword.
There are two ways to use this keyword: function expressions and function definitions.
A function expression evaluates to a function but doesn't put that function into your scope.
A function definition creates a variable for your function.
It does this in such a way that
 everything in the scope in which you defined the function
 can use the variable,
 even lines before the declaration!
This is called "hoisting", and you don't need to know much about it right now.
Just know that you can reference functions defined this way before you define them.
A function expression looks like
: function functionName(paramOne, paramTwo, paramThree, etc){
:  //function body
: }
Note that it does not declare any types.
JavaScript doesn't care about your types.
A function expression doesn't need to have a function name.
You can make anonymous functions like
: function(paramOne, paramTwo, etc){/* do stuff */}
if you want.
If a function expression with a name is a statement all by itself,
 then it becomes a function definition and can be referenced by anything else in that scope.
It's as if you typed
: var functionName = function functionName(paramOne, etc){};
Functions are values that can be passed around like anything else.
You can assign variables to be equal to function values.
JavaScript doesn't care if the value of the variable wasn't a function before.
For the most part, JavaScript doesn't care about your types.
Everything is a value, and most values are objects.
In fact, functions act like dictionaries just like objects do.
You can say
: var foo = function bar(x, y){return x;};
: foo.baz = "quux";
and foo will be a function with a "baz" property.
JavaScript doesn't require semicolons most of the time, but you should use them anyway.

*** callback functions
NodeJS follows an explicit [[http://c2.com/cgi/wiki?ContinuationPassingStyle][continuation]]-passing style.
This means that instead of waiting for some library call to complete,
 you pass it a function that it calls when it's done.
This works really well for asynchronous calls, especially I/O.
Here's an example of how one might pass a continuation:
: function doSomething(callback){
:  console.log("first");
:  callback("second");
: }
: function doAnotherThing(result){
:  console.log(result);
: }
: doSomething(doAnotherThing);
: console.log("third");
The above example passes a function doAnotherThing to a function doSomething, which calls it.
doAnotherThing is the continuation, and doSomething takes a continuation as its only parameter.
A more realistic example would be:
: var filesystem = require("fs");
: filesystem.readdir(".", function(err, files){console.log(files);});

*** webservers in Node
This is better documented at the NodeJS website.
I'll just explain the parts of it that this example uses.
require("http") returns the NodeJS HTTP [[http://www.nodejs.org/api/http.html][library]].
It has a helper method called createServer,
 which takes a callback function as a parameter.
This callback function is responsible for responding to HTTP requests.
Node has the notion of an event emitter.
An event emitter can register subscribers
 and then publish events to these subscribers.
A subscriber registers with a particular channel of an event emitter.
The channels are string names.
A webserver in Node emits "request" events (among others).
When you tell an event emitter to emit an event,
 you can pass additional parameters to it.
The event emitter passes these parameters to the listener (subscriber).
The "request" events come with two additional parameters: a request object and a response object.
The request and response objects are also event emitters.
The callback you passed to createServer is responsible for responding to HTTP requests.
It does so by telling the response object to emit events.
Here is an example of a webserver that always says the same thing:
: require("http").createServer(function(request, response){response.end("Hello, World!")}).listen(8080);
If you ran that, then any HTTP request to [[http://127.0.0.1:8080/]] would show a web page with the hello-world text.
But so would a request to [[http://127.0.0.1:8080/any/path/you/ask/for]].
This is because the path is part of the request object,
 and the function in that example doesn't change its behavior
 based on anything in that object.
Writing a webserver in NodeJS basically entails taking the line in the above example and changing the function in the middle.
How that function transforms events emitted by the request parameter into events to emit on the response parameter is how your website behaves.

*** Node and the JS event loop
Why do we need to pass these callbacks around, anyway?
Because the interpreter Node uses is single-threaded, as far as your JS is concerned.
There's nothing like
: var unsafeArray = [0, 1, 2];
: var pid = fork();
: if(pid) console.log(unsafeArray[1]);
: else unsafeArray[1] = "race condition";
in Node.
You don't make threads and share global state while they preempt one another.
Instead, there's one global event loop for the process.
You can still get yourself in trouble, and now in two different ways,
 but the most common problem with threaded code is no longer an issue.
In a thread system like the POSIX pthreads library,
 any thread can be paused at any time, and on any line of the compiled code.
That means sometimes in the middle of a line of the source!
One nice thing about that is it means that
 one thread can run an infinite loop and the others still get to do things.
But a big problem with it is that you can't know for sure that
 the memory you're sharing doesn't get overwritten in the middle of your attempt to read it.
Node is different. In Node (and probably in all JavaScript, but I'm not sure),
 once the interpreter begins executing your function, there's no other thread that can step in and interrupt it.
Your function has the floor, basically. When it returns, then other things get to run.
Node provides a global variable for introspecting on the interpreter process.
It's called "process" and is [[http://nodejs.org/api/process.html][documented]] in the API.
process has a method called "nextTick", to which you can pass a callback.
This is how you (and libraries other people have written) can interact with the event loop.
Here's an example of how you might use process.nextTick(callback)
: var counter = 0;
: function doSomething(){
:  counter++;
:  console.log(counter);
: }
: console.log("one");
: process.nextTick(doSomething);
: console.log("two");
: doSomething();
: console.log("three");
This program would print
: one
: two
: 1
: three
: 2
and then exit.
It outputs the first four lines in one "tick" and then calls doSomething on the next tick.
And doSomething takes counter, increments it, and outputs its new value.
